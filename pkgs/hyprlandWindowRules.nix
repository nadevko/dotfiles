{
  inputs,
  lib,
  writeText,
  stdenvNoCC,
  runCommand,
  grex,

  rules ? [
    {
      rules = [
        "float"
        "pin"
        "move 72% 72%"
        "keepaspectratio"
      ];
      class = "^com.(ayu|tele)gram.desktop$";
      title = "^(AyuG|Teleg)ramDesktop$";
    }
  ],
  defaultRules ? [
    "float"
    "pin"
    "move 72% 72%"
    "size 25%"
    "keepaspectratio"
  ],

  firefoxPipTitles ? null,
  firefoxClass ? null,
  firefoxRules ? defaultRules,
}:
let
  inherit (builtins)
    all
    isString
    readFile
    fromJSON
    attrValues
    concatStringsSep
    concatMap
    ;
  inherit (lib) licenses platforms;
  inherit (lib.trivial) pipe;
  inherit (lib.strings) optionalString escapeShellArgs;
  inherit (lib.attrsets) optionalAttrs;
  inherit (lib.lists) unique optional;
in
assert all (all isString) [
  defaultRules
  firefoxRules
];
assert firefoxClass == null || isString firefoxClass;
assert all (
  {
    class ? null,
    title ? null,
    rules ? null,
  }:
  (rules == null || all isString rules)
  && (isString class || class == null)
  && (isString title || title == null)
  && (title != null || class != null)
) rules;
let
  withFirefoxPipTitles = firefoxPipTitles != null;

  firefoxPips =
    if withFirefoxPipTitles then
      pipe firefoxPipTitles.outPath [
        readFile
        fromJSON
        attrValues
        unique
      ]
    else
      [ ];

  getTitles =
    patterns:
    readFile (
      runCommand "firefoxTitle" { } ''
        ${grex}/bin/grex ${escapeShellArgs patterns} | head -c -1 > $out
      ''
    );

  windowRulesV2 =
    optional withFirefoxPipTitles (
      optionalAttrs (firefoxClass != null) { class = firefoxClass; }
      // {
        title = getTitles firefoxPips;
        rules = firefoxRules;
      }
    )
    ++ rules;

  buildEntry =
    {
      class ? null,
      title ? null,
      rules ? null,
    }:
    map (
      rule:
      "windowrulev2 = ${rule}${optionalString (class != null) ", class:${class}"}${
        optionalString (title != null) ", title:${title}"
      }"
    ) (if rules != null then rules else defaultRules);
in
stdenvNoCC.mkDerivation {
  pname = "hyprland-window-rules";
  version = "0.1";

  dontUnpack = true;

  src = writeText "hyprland.conf" (
    ''
      # This file is autogenerated
      ${optionalString withFirefoxPipTitles ''
        # +firefoxPipTitles v${firefoxPipTitles.version}
      ''}
    ''
    + concatStringsSep "\n" (concatMap buildEntry windowRulesV2)
  );

  installPhase = ''
    runHook preInstall

    cp $src $out

    runHook postInstall
  '';

  meta = {
    description = "Hyprland configuration file with window rules";
    homepage = "https://github.com/nadevko/dotfiles";
    license = licenses.eupl12;
    maintainers = with inputs.self.lib.maintainers; [ nadevko ];
    platforms = platforms.linux;
  };
}
